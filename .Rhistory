81L))
View(splom_dat)
head(iris)
data(iris)
require(pairsD3)
pairsD3(iris[,1:4],group=iris[,5])
devtools::install_github("garthtarr/pairsD3")
library(pairsD3)
pairsD3(iris[,1:4],group=iris[,5])
pairsD3(iris[,1:4],group=iris[,5])%>%savePairs(file = 'iris.html')
devtools::install_github("jcizel/scatterMatrixD3")
library(scatterMatrixD3)
scatterMatrix(
data = iris
)
pairsD3(iris[,1:4],group=iris[,5])#%>%savePairs(file = 'iris.html')
?scatterMatrix
?scatterMatrixOutput
library(dplyr)
library(tidyr)
library(knitr)
library(printr)
library(gridExtra)
library(ggplot2)
library(ggthemes)
library(likert)
library(readxl)
library(car)
library(reshape)
library(plyr)
library(sjPlot)
shiny::runApp('C:/Users/patil.GONZAGA/Desktop/myfirstshiny/revisedui')
devtools::install_github("rstudio/leaflet")
setwd("C:/Users/patil.GONZAGA/Dropbox/Reverything/Refugees")
# Chunk 2: setup
knitr::opts_chunk$set(echo = FALSE,eval=FALSE)
library(readxl)
library(tidyr)
library(dplyr)
library(d3heatmap)#if (!require("d3heatmap")) #devtools::install_github("rstudio/d3heatmap")
library(htmlwidgets)
library(networkD3)#devtools::install_github("christophergandrud/networkd3")
library(rCharts)
library(magrittr)
library(rcdimple)
library(rgdal)
library(leaflet)
library(countrycode)
# Chunk 4
ref <- read_excel('fy14_arrivals_by_state_nationality.xls', skip = 1)
names(ref)[1] <- "State"
ref=ref[1:49,-2]
row.names(ref)=ref$State
row.names(ref)
row.names(ref)=ref$State
row.names(ref)
reflong=ref%>%gather(Country,Number,c(2:80))%>%filter(Number>0)
reflong$Country=as.character(reflong$Country)
save(reflong,file="reflong.Rda")
Countrydf=reflong%>%group_by(Country)%>%summarize(Refugees=sum(Number))
Statesdf=reflong%>%group_by(State)%>%summarize(Refugees=sum(Number))
#df=Countrydf[order(-Countrydf$Refugees),]
countrydimple=dimple(
Refugees ~ Country,
data = Countrydf,
type = "bubble",bounds = list(x=90,y=30,width=800,height=330))%>%
yAxis(type = "addMeasureAxis", outputFormat = ',.0f') %>%default_colors(rainbow(4))
saveWidget(countrydimple,file = "countrydimple.html",selfcontained = TRUE)
# Chunk 4
# Remove the unknown country.
countryleaf=Countrydf[-74,]
countryleaf$iso_a3=as.factor(countrycode(countryleaf$Country,"country.name","iso3c"))
#Palestine 158 refugees and West Bank 1 refugee have iso_a3 of PSE
countryleaf=countryleaf[countryleaf$iso_a3!="PSE",]
countryleaf=rbind(countryleaf,data.frame(Country="PALESTINE AND WEST BANK",Refugees=158,iso_a3="PSE"))
countryleaf=data.frame(countryleaf)
# We download the data for the map from naturalearthdata.com
url <- "http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip"
folder <- getwd() #set a folder where to download and extract the data
file <- basename(url)
download.file(url, file)
unzip(file, exdir = folder)
#And read it with rgdal library
world <- readOGR(dsn = folder,
layer = "ne_50m_admin_0_countries",
encoding = "UTF-8",
verbose = FALSE)
countryleaf=data.frame(countryleaf)
#world <- sp::merge(world,countryleaf, by="iso_a3")
world <- merge(world, countryleaf,
by.x = "iso_a3",
by.y = "iso_a3",
sort = FALSE)
#world@data$iso_a3
#Colour palette. Check ?colorQuantile and ?RColorBrewer for more options
pal <- colorNumeric(
palette = "Reds", #Blues",
domain = Countrydf$Refugees
)
#Pop up: The info displayed when click on a country
world_popup <- paste0(world$admin,
", Refugees:",
world$Refugees)
#Tiles coming from stamen.com
tiles <- "http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png"
attribution <- 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Map data by <a href="http://www.naturalearthdata.com/">Natural Earth</a>.'
#And finally the map:
countryleaflet=leaflet(data = world) %>%
addTiles(urlTemplate = tiles,
attribution = attribution) %>%
setView(0, 0, zoom = 2) %>%
addPolygons(fillColor = ~pal(world$Refugees),
fillOpacity = 1,
color = "#000000",
weight = 1,
label=~world_popup)%>%  addLegend("bottomright", pal = pal, values = ~Refugees,
title = "Number of Refugees",
opacity = 1
)
saveWidget(countryleaflet,file = "countryleaflet.html",selfcontained = TRUE)
# Chunk 5
df=Statesdf
names(df)[1]="Destination"
statedimple=dimple(
Refugees ~ Destination,
data = df,
type = "bubble",bounds = list(x=90,y=30,width=800,height=330))%>%
yAxis(type = "addMeasureAxis", outputFormat = ',.0f') %>%default_colors(rainbow(4))
saveWidget(statedimple,file = "statedimple.html",selfcontained = TRUE)
# Chunk 5
# Remove the unknown country.
countryleaf$iso_a3=as.factor(countrycode(countryleaf$Country,"country.name","iso3c"))
#Palestine 158 refugees and West Bank 1 refugee have iso_a3 of PSE
countryleaf=countryleaf[countryleaf$iso_a3!="PSE",]
countryleaf=rbind(countryleaf,data.frame(Country="PALESTINE AND WEST BANK",Refugees=158,iso_a3="PSE"))
countryleaf=data.frame(countryleaf)
# We download the data for the map from naturalearthdata.com
url <- "http://www2.census.gov/geo/tiger/GENZ2014/shp/cb_2014_us_state_20m.zip"
folder <- getwd() #set a folder where to download and extract the data
file <- basename(url)
download.file(url, file)
unzip(file, exdir = folder)
#And read it with rgdal library
states <- readOGR(dsn = folder,
layer = "cb_2014_us_state_20m",
encoding = "UTF-8",
verbose = FALSE)
states@data$NAME=toupper(states@data$NAME)
names(Statesdf)[1]="NAME"
#world <- sp::merge(world,countryleaf, by="iso_a3")
states <- sp::merge(states, Statesdf,
by.x = "NAME",
by.y = "NAME",
sort = FALSE)
#world@data$iso_a3
#Colour palette. Check ?colorQuantile and ?RColorBrewer for more options
pal <- colorNumeric(
palette = "Reds", #Blues",
domain = Statesdf$Refugees
)
#Pop up: The info displayed when click on a country
state_popup <- paste0(states$NAME,
", Refugees:",
states$Refugees)
#Tiles coming from stamen.com
tiles <- "http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png"
attribution <- 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Map data by <a href="http://www.naturalearthdata.com/">Natural Earth</a>.'
#And finally the map:
stateleaflet=leaflet(data = states) %>%
addTiles(urlTemplate = tiles,
attribution = attribution) %>%
setView(-95, 50, zoom = 3) %>%
addPolygons(fillColor = ~pal(states$Refugees),
fillOpacity = 1,
color = "#000000",
weight = 1,
label = ~state_popup)%>%  addLegend("bottomright", pal = pal, values = ~Refugees,
title = "Number of Refugees",
opacity = 1
)
saveWidget(stateleaflet,file = "stateleaflet.html",selfcontained = TRUE)
# Chunk 6
myheatmap=d3heatmap(ref[,-1],scale="column",dendrogram = "none",labRow=row.names(ref),color="Blues")
saveWidget(myheatmap,file = "heatmap14.html",selfcontained = TRUE)
# Code copied from Kyle Walker's work
vec_country=c(unique(reflong$Country))
vec_state=c(unique(reflong$State))
name_vec <- c(unique(reflong$Country), unique(reflong$State))
name_df <- data.frame("name" = name_vec, "id" = 0:127)
ref2 <- reflong %>%
left_join(name_df, by = c("State" = "name")) %>%
rename(state_id  = id) %>%
left_join(name_df, by = c("Country" = "name")) %>%
rename(country_id = id)
sankeyNetwork(Links = ref2, Nodes = name_df, Source = "country_id",
Target = "state_id", Value = "Number", NodeID = "name",margin=10,
fontSize = 10, nodeWidth = 25,nodePadding = 10, colourScale = JS("d3.scale.category20()"),height=1200,width=850)%>%
saveNetwork(file = 'Sankey2014.html')
# Chunk 2: setup
knitr::opts_chunk$set(echo = FALSE,eval=FALSE)
library(readxl)
library(tidyr)
library(dplyr)
library(d3heatmap)#if (!require("d3heatmap")) #devtools::install_github("rstudio/d3heatmap")
library(htmlwidgets)
library(networkD3)#devtools::install_github("christophergandrud/networkd3")
library(rCharts)
library(magrittr)
library(rcdimple)
library(rgdal)
library(leaflet)
library(countrycode)
# Chunk 4
ref <- read_excel('fy14_arrivals_by_state_nationality.xls', skip = 1)
names(ref)[1] <- "State"
ref=ref[1:49,-2]
row.names(ref)=ref$State
row.names(ref)
row.names(ref)=ref$State
row.names(ref)
reflong=ref%>%gather(Country,Number,c(2:80))%>%filter(Number>0)
reflong$Country=as.character(reflong$Country)
save(reflong,file="reflong.Rda")
Countrydf=reflong%>%group_by(Country)%>%summarize(Refugees=sum(Number))
Statesdf=reflong%>%group_by(State)%>%summarize(Refugees=sum(Number))
#df=Countrydf[order(-Countrydf$Refugees),]
countrydimple=dimple(
Refugees ~ Country,
data = Countrydf,
type = "bubble",bounds = list(x=90,y=30,width=800,height=330))%>%
yAxis(type = "addMeasureAxis", outputFormat = ',.0f') %>%default_colors(rainbow(4))
saveWidget(countrydimple,file = "countrydimple.html",selfcontained = TRUE)
# Chunk 4
# Remove the unknown country.
countryleaf=Countrydf[-74,]
countryleaf$iso_a3=as.factor(countrycode(countryleaf$Country,"country.name","iso3c"))
#Palestine 158 refugees and West Bank 1 refugee have iso_a3 of PSE
countryleaf=countryleaf[countryleaf$iso_a3!="PSE",]
countryleaf=rbind(countryleaf,data.frame(Country="PALESTINE AND WEST BANK",Refugees=158,iso_a3="PSE"))
countryleaf=data.frame(countryleaf)
# We download the data for the map from naturalearthdata.com
url <- "http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip"
folder <- getwd() #set a folder where to download and extract the data
file <- basename(url)
download.file(url, file)
unzip(file, exdir = folder)
#And read it with rgdal library
world <- readOGR(dsn = folder,
layer = "ne_50m_admin_0_countries",
encoding = "UTF-8",
verbose = FALSE)
countryleaf=data.frame(countryleaf)
#world <- sp::merge(world,countryleaf, by="iso_a3")
world <- merge(world, countryleaf,
by.x = "iso_a3",
by.y = "iso_a3",
sort = FALSE)
#world@data$iso_a3
#Colour palette. Check ?colorQuantile and ?RColorBrewer for more options
pal <- colorNumeric(
palette = "Reds", #Blues",
domain = Countrydf$Refugees
)
#Pop up: The info displayed when click on a country
world_popup <- paste0(world$admin,
", Refugees:",
world$Refugees)
#Tiles coming from stamen.com
tiles <- "http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png"
attribution <- 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Map data by <a href="http://www.naturalearthdata.com/">Natural Earth</a>.'
#And finally the map:
countryleaflet=leaflet(data = world) %>%
addTiles(urlTemplate = tiles,
attribution = attribution) %>%
setView(0, 0, zoom = 2) %>%
addPolygons(fillColor = ~pal(world$Refugees),
fillOpacity = 1,
color = "#000000",
weight = 1,
label=~world_popup)%>%  addLegend("bottomright", pal = pal, values = ~Refugees,
title = "Number of Refugees",
opacity = 1
)
saveWidget(countryleaflet,file = "countryleaflet.html",selfcontained = TRUE)
# Chunk 5
df=Statesdf
names(df)[1]="Destination"
statedimple=dimple(
Refugees ~ Destination,
data = df,
type = "bubble",bounds = list(x=90,y=30,width=800,height=330))%>%
yAxis(type = "addMeasureAxis", outputFormat = ',.0f') %>%default_colors(rainbow(4))
saveWidget(statedimple,file = "statedimple.html",selfcontained = TRUE)
# Chunk 5
# Remove the unknown country.
countryleaf$iso_a3=as.factor(countrycode(countryleaf$Country,"country.name","iso3c"))
#Palestine 158 refugees and West Bank 1 refugee have iso_a3 of PSE
countryleaf=countryleaf[countryleaf$iso_a3!="PSE",]
countryleaf=rbind(countryleaf,data.frame(Country="PALESTINE AND WEST BANK",Refugees=158,iso_a3="PSE"))
countryleaf=data.frame(countryleaf)
# We download the data for the map from naturalearthdata.com
url <- "http://www2.census.gov/geo/tiger/GENZ2014/shp/cb_2014_us_state_20m.zip"
folder <- getwd() #set a folder where to download and extract the data
file <- basename(url)
download.file(url, file)
unzip(file, exdir = folder)
#And read it with rgdal library
states <- readOGR(dsn = folder,
layer = "cb_2014_us_state_20m",
encoding = "UTF-8",
verbose = FALSE)
states@data$NAME=toupper(states@data$NAME)
names(Statesdf)[1]="NAME"
#world <- sp::merge(world,countryleaf, by="iso_a3")
states <- sp::merge(states, Statesdf,
by.x = "NAME",
by.y = "NAME",
sort = FALSE)
#world@data$iso_a3
#Colour palette. Check ?colorQuantile and ?RColorBrewer for more options
pal <- colorNumeric(
palette = "Reds", #Blues",
domain = Statesdf$Refugees
)
#Pop up: The info displayed when click on a country
state_popup <- paste0(states$NAME,
", Refugees:",
states$Refugees)
#Tiles coming from stamen.com
tiles <- "http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png"
attribution <- 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Map data by <a href="http://www.naturalearthdata.com/">Natural Earth</a>.'
#And finally the map:
stateleaflet=leaflet(data = states) %>%
addTiles(urlTemplate = tiles,
attribution = attribution) %>%
setView(-95, 50, zoom = 3) %>%
addPolygons(fillColor = ~pal(states$Refugees),
fillOpacity = 1,
color = "#000000",
weight = 1,
label = ~state_popup)%>%  addLegend("bottomright", pal = pal, values = ~Refugees,
title = "Number of Refugees",
opacity = 1
)
saveWidget(stateleaflet,file = "stateleaflet.html",selfcontained = TRUE)
# Chunk 6
myheatmap=d3heatmap(ref[,-1],scale="column",dendrogram = "none",labRow=row.names(ref),color="Blues")
saveWidget(myheatmap,file = "heatmap14.html",selfcontained = TRUE)
# Chunk 2: setup
knitr::opts_chunk$set(echo = FALSE,eval=FALSE)
library(readxl)
library(tidyr)
library(dplyr)
library(d3heatmap)#if (!require("d3heatmap")) #devtools::install_github("rstudio/d3heatmap")
library(htmlwidgets)
library(networkD3)#devtools::install_github("christophergandrud/networkd3")
library(rCharts)
library(magrittr)
library(rcdimple)
library(rgdal)
library(leaflet)
library(countrycode)
# Chunk 4
ref <- read_excel('fy14_arrivals_by_state_nationality.xls', skip = 1)
names(ref)[1] <- "State"
ref=ref[1:49,-2]
row.names(ref)=ref$State
row.names(ref)
row.names(ref)=ref$State
row.names(ref)
reflong=ref%>%gather(Country,Number,c(2:80))%>%filter(Number>0)
reflong$Country=as.character(reflong$Country)
save(reflong,file="reflong.Rda")
Countrydf=reflong%>%group_by(Country)%>%summarize(Refugees=sum(Number))
Statesdf=reflong%>%group_by(State)%>%summarize(Refugees=sum(Number))
#df=Countrydf[order(-Countrydf$Refugees),]
countrydimple=dimple(
Refugees ~ Country,
data = Countrydf,
type = "bubble",bounds = list(x=90,y=30,width=800,height=330))%>%
yAxis(type = "addMeasureAxis", outputFormat = ',.0f') %>%default_colors(rainbow(4))
saveWidget(countrydimple,file = "countrydimple.html",selfcontained = TRUE)
# Chunk 4
# Remove the unknown country.
countryleaf=Countrydf[-74,]
countryleaf$iso_a3=as.factor(countrycode(countryleaf$Country,"country.name","iso3c"))
#Palestine 158 refugees and West Bank 1 refugee have iso_a3 of PSE
countryleaf=countryleaf[countryleaf$iso_a3!="PSE",]
countryleaf=rbind(countryleaf,data.frame(Country="PALESTINE AND WEST BANK",Refugees=158,iso_a3="PSE"))
countryleaf=data.frame(countryleaf)
# We download the data for the map from naturalearthdata.com
url <- "http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip"
folder <- getwd() #set a folder where to download and extract the data
file <- basename(url)
download.file(url, file)
unzip(file, exdir = folder)
#And read it with rgdal library
world <- readOGR(dsn = folder,
layer = "ne_50m_admin_0_countries",
encoding = "UTF-8",
verbose = FALSE)
countryleaf=data.frame(countryleaf)
#world <- sp::merge(world,countryleaf, by="iso_a3")
world <- merge(world, countryleaf,
by.x = "iso_a3",
by.y = "iso_a3",
sort = FALSE)
#world@data$iso_a3
#Colour palette. Check ?colorQuantile and ?RColorBrewer for more options
pal <- colorNumeric(
palette = "Reds", #Blues",
domain = Countrydf$Refugees
)
#Pop up: The info displayed when click on a country
world_popup <- paste0(world$admin,
", Refugees:",
world$Refugees)
#Tiles coming from stamen.com
tiles <- "http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png"
attribution <- 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Map data by <a href="http://www.naturalearthdata.com/">Natural Earth</a>.'
#And finally the map:
countryleaflet=leaflet(data = world) %>%
addTiles(urlTemplate = tiles,
attribution = attribution) %>%
setView(0, 0, zoom = 2) %>%
addPolygons(fillColor = ~pal(world$Refugees),
fillOpacity = 1,
color = "#000000",
weight = 1,
label=~world_popup)%>%  addLegend("bottomright", pal = pal, values = ~Refugees,
title = "Number of Refugees",
opacity = 1
)
saveWidget(countryleaflet,file = "countryleaflet.html",selfcontained = TRUE)
# Chunk 5
df=Statesdf
names(df)[1]="Destination"
statedimple=dimple(
Refugees ~ Destination,
data = df,
type = "bubble",bounds = list(x=90,y=30,width=800,height=330))%>%
yAxis(type = "addMeasureAxis", outputFormat = ',.0f') %>%default_colors(rainbow(4))
saveWidget(statedimple,file = "statedimple.html",selfcontained = TRUE)
# Chunk 5
# Remove the unknown country.
countryleaf$iso_a3=as.factor(countrycode(countryleaf$Country,"country.name","iso3c"))
#Palestine 158 refugees and West Bank 1 refugee have iso_a3 of PSE
countryleaf=countryleaf[countryleaf$iso_a3!="PSE",]
countryleaf=rbind(countryleaf,data.frame(Country="PALESTINE AND WEST BANK",Refugees=158,iso_a3="PSE"))
countryleaf=data.frame(countryleaf)
# We download the data for the map from naturalearthdata.com
url <- "http://www2.census.gov/geo/tiger/GENZ2014/shp/cb_2014_us_state_20m.zip"
folder <- getwd() #set a folder where to download and extract the data
file <- basename(url)
download.file(url, file)
unzip(file, exdir = folder)
#And read it with rgdal library
states <- readOGR(dsn = folder,
layer = "cb_2014_us_state_20m",
encoding = "UTF-8",
verbose = FALSE)
states@data$NAME=toupper(states@data$NAME)
names(Statesdf)[1]="NAME"
#world <- sp::merge(world,countryleaf, by="iso_a3")
states <- sp::merge(states, Statesdf,
by.x = "NAME",
by.y = "NAME",
sort = FALSE)
#world@data$iso_a3
#Colour palette. Check ?colorQuantile and ?RColorBrewer for more options
pal <- colorNumeric(
palette = "Reds", #Blues",
domain = Statesdf$Refugees
)
#Pop up: The info displayed when click on a country
state_popup <- paste0(states$NAME,
", Refugees:",
states$Refugees)
#Tiles coming from stamen.com
tiles <- "http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png"
attribution <- 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Map data by <a href="http://www.naturalearthdata.com/">Natural Earth</a>.'
#And finally the map:
stateleaflet=leaflet(data = states) %>%
addTiles(urlTemplate = tiles,
attribution = attribution) %>%
setView(-95, 50, zoom = 3) %>%
addPolygons(fillColor = ~pal(states$Refugees),
fillOpacity = 1,
color = "#000000",
weight = 1,
label = ~state_popup)%>%  addLegend("bottomright", pal = pal, values = ~Refugees,
title = "Number of Refugees",
opacity = 1
)
saveWidget(stateleaflet,file = "stateleaflet.html",selfcontained = TRUE)
# Chunk 6
myheatmap=d3heatmap(ref[,-1],scale="column",dendrogram = "none",labRow=row.names(ref),color="Blues")
saveWidget(myheatmap,file = "heatmap14.html",selfcontained = TRUE)
# Code copied from Kyle Walker's work
vec_country=c(unique(reflong$Country))
vec_state=c(unique(reflong$State))
name_vec <- c(unique(reflong$Country), unique(reflong$State))
name_df <- data.frame("name" = name_vec, "id" = 0:127)
ref2 <- reflong %>%
left_join(name_df, by = c("State" = "name")) %>%
rename(state_id  = id) %>%
left_join(name_df, by = c("Country" = "name")) %>%
rename(country_id = id)
sankeyNetwork(Links = ref2, Nodes = name_df, Source = "country_id",
Target = "state_id", Value = "Number", NodeID = "name",margin=10,
fontSize = 10, nodeWidth = 25,nodePadding = 10, colourScale = JS("d3.scale.category20()"),height=1200,width=850)%>%
saveNetwork(file = 'Sankey2014.html')
